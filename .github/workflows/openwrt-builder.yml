name: OpenWrt Builder
run-name: Build - ${{ inputs.model }}

on:
  workflow_dispatch:
    inputs:
      model:
        description: '选择设备配置'
        required: true
        default: 'x86_64_LEDE'
        type: choice
        options:
          - x86_64_LEDE
          - x86_64_immortalWrt
          - Qualcommax_LEDE
          - Qualcommax_V
          - Qualcommax_B

# 基础配置（公共参数）
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  EXTEND_DRIVER: true
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86-64
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04
    steps:

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024

      - name: Checkout
        uses: actions/checkout@main

      - name: Load Device Config
        run: |
          # 设置设备目录路径
          DEVICE_PATH="devices/${{ inputs.model }}"
          echo "DEVICE_PATH=$DEVICE_PATH" >> $GITHUB_ENV

          # 读取 env 配置
          if [ -f "$DEVICE_PATH/env" ]; then
            while IFS= read -r line || [[ -n "$line" ]]; do
              # 跳过空行和注释
              [[ -z "$line" || "$line" =~ ^# ]] && continue

              # 解析变量名和值（以: 分割）
              var_name="${line%%:*}"
              var_value="${line#*:}"

              # 去除可能的前后空格
              var_name="$(echo -n "$var_name" | xargs)"
              var_value="$(echo -n "$var_value" | xargs)"

              # 仅当变量非空时才覆盖默认值
              if [[ -n "$var_value" ]]; then
                echo "$var_name=$var_value" >> $GITHUB_ENV
              fi
            done < "$DEVICE_PATH/env"
          fi

          # 处理路径相关变量（仅当存在时修改）
          [[ -n "$CONFIG_FILE" ]] && echo "CONFIG_FILE=$DEVICE_PATH/$CONFIG_FILE" >> $GITHUB_ENV
          [[ -n "$DIY_P1_SH" ]] && echo "DIY_P1_SH=$DEVICE_PATH/$DIY_P1_SH" >> $GITHUB_ENV
          [[ -n "$DIY_P2_SH" ]] && echo "DIY_P2_SH=$DEVICE_PATH/$DIY_P2_SH" >> $GITHUB_ENV
          [[ -n "$FEEDS_CONF" ]] && echo "FEEDS_CONF=$DEVICE_PATH/$FEEDS_CONF" >> $GITHUB_ENV

      - name: Clone Source Code(克隆源代码)
        run: |
          df -hT $GITHUB_WORKSPACE
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV

      - name: Generate Variables(生成变量)
        run: |
          cd $OPENWRT_PATH
          SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          CONFIG_HASH=$(md5sum $GITHUB_WORKSPACE/$CONFIG_FILE | awk '{print $1}')
          echo "CONFIG_HASH=$CONFIG_HASH" >> $GITHUB_ENV

      - name: Check Caches
        id: check-cache
        uses: actions/cache@main
        with:
          key: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.FIRMWARE_TAG }}-${{ env.CONFIG_HASH }}
          restore-keys: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{env.FIRMWARE_TAG}}
          path: |
            ./openwrt/.ccache
            ./openwrt/staging_dir/host*
            ./openwrt/staging_dir/tool*

      - name: Update Caches
        run: |
          if [ -d "./openwrt/staging_dir" ]; then
            find "./openwrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
            done

            mkdir -p ./openwrt/tmp && echo "1" > ./openwrt/tmp/.build

            echo "toolchain skiped done!"
          else
            echo "caches missed!"
          fi

          if ${{steps.check-cache.outputs.cache-hit != 'true'}}; then
            CACHE_LIST=$(gh cache list --key ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{env.FIRMWARE_TAG}} | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
               gh cache delete $CACHE_KEY
            done

            echo "caches cleanup done!"
          fi

      - name: Load config
        run: |
          echo "CONFIG_FILE path is $CONFIG_FILE"
          cp $CONFIG_FILE $OPENWRT_PATH/.config

      - name: Extend Driver
        if: env.EXTEND_DRIVER == 'true'
        run: |
          echo "" >> $OPENWRT_PATH/.config  # 先追加一个换行符
          cat config/Driver.config >> $OPENWRT_PATH/.config

      - name: Load custom feeds
        run: |
          cd $GITHUB_WORKSPACE
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF $OPENWRT_PATH/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd $OPENWRT_PATH && ./scripts/feeds update -a

      - name: Install feeds
        run: cd $OPENWRT_PATH && ./scripts/feeds install -a

      - name: Install General
        run: |
          cd $GITHUB_WORKSPACE
          chmod +x scripts/General.sh
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/scripts/General.sh

      - name: Custom Packages
        run: |
          if [ -f "$DEVICE_PATH/package" ]; then
            cd $GITHUB_WORKSPACE
            echo "" >> scripts/Packages.sh  # 先追加一个换行符
            cat "$DEVICE_PATH/package" >> scripts/Packages.sh
            chmod +x scripts/Packages.sh
            cd "$OPENWRT_PATH/package/"
            $GITHUB_WORKSPACE/scripts/Packages.sh
            echo "执行 Packages.sh 脚本"
          else
            echo "Package file not found: $DEVICE_PATH/package, skipping."
          fi

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files $OPENWRT_PATH/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
          chmod +x $DIY_P2_SH
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Download DL Package(下载DL软件包)
        run: |
          cd $OPENWRT_PATH
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Firmware(开始编译固件)
        id: compile
        run: |
          cd $OPENWRT_PATH
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      - name: Optimize Compilation Directories
        run: |
          echo "======== Step 1: Print Initial Directory Sizes ========"
          du -sh "$OPENWRT_PATH/.ccache" 2>/dev/null || echo "No .ccache directory found"
          
          if compgen -G "$OPENWRT_PATH/staging_dir/host*" > /dev/null; then
            du -sh "$OPENWRT_PATH/staging_dir/host*" 2>/dev/null
          else
            echo "No host directories found"
          fi
          
          if compgen -G "$OPENWRT_PATH/staging_dir/tool*" > /dev/null; then
            du -sh "$OPENWRT_PATH/staging_dir/tool*" 2>/dev/null
            echo "======== staging_dir/tool* Subdirectory Sizes ========"
            for dir in "$OPENWRT_PATH/staging_dir/tool"*; do
              echo "Subdirectories in: $dir"
              du -sh "$dir"/* 2>/dev/null || echo "No subdirectories in $dir"
              echo "---------------------------------"
            done
          else
            echo "No tool directories found"
          fi
      
          echo "======== Step 2: Remove 'initial' Directory in Toolchain ========"
          find "$OPENWRT_PATH/staging_dir/toolchain-"* -type d -name "initial" -exec rm -rf {} + 2>/dev/null || echo "No 'initial' directory found"
      
          echo "======== Step 3: Clean 'libexec' Directory in Toolchain ========"
          for libexec_dir in "$OPENWRT_PATH/staging_dir/toolchain-"*/libexec; do
            if [ -d "$libexec_dir" ]; then
              echo "Optimizing: $libexec_dir"
              find "$libexec_dir" -type f ! -name "*.so*" -delete
            else
              echo "No 'libexec' directory found in $libexec_dir"
            fi
          done
      
          echo "======== Step 4: Print Final Directory Sizes ========"
          du -sh "$OPENWRT_PATH/.ccache" 2>/dev/null || echo "No .ccache directory found"
      
          if compgen -G "$OPENWRT_PATH/staging_dir/host*" > /dev/null; then
            du -sh "$OPENWRT_PATH/staging_dir/host*" 2>/dev/null
          else
            echo "No host directories found"
          fi
      
          if compgen -G "$OPENWRT_PATH/staging_dir/tool*" > /dev/null; then
            du -sh "$OPENWRT_PATH/staging_dir/tool*" 2>/dev/null
            echo "======== staging_dir/tool* Subdirectory Sizes After Cleanup ========"
            for dir in "$OPENWRT_PATH/staging_dir/tool"*; do
              echo "Subdirectories in: $dir"
              du -sh "$dir"/* 2>/dev/null || echo "No subdirectories in $dir"
              echo "---------------------------------"
            done
          else
            echo "No tool directories found"
          fi

      - name: Check Space Usage(检查空间使用情况)
        if: (!cancelled())
        run: df -hT

      - name: Organize Files(整理文件)
        if: steps.compile.outputs.status == 'success'
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*
          find $OPENWRT_PATH/bin/packages/ -type f \( -name "*.ipk" -o -name "*.apk" \) -exec mv -f {} packages/ \;
          tar -zcf Packages.tar.gz packages
          cp $OPENWRT_PATH/.config build.config
          rm -rf packages
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Generate release tag
        id: tag
        if: env.FIRMWARE_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Firmware To Release(发布固件)
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          tag: ${{ steps.tag.outputs.release_tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
            ### 📒 固件信息(${{ env.FIRMWARE_TAG }})
            - 💻 这是 ${{ env.FIRMWARE_TAG }} 平台使用的 OpenWrt 固件
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 🌐 默认地址: 192.168.1.1
            - 🔑 默认密码: password
            ### 🧊 固件版本
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.VERSION_INFO }}

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 2

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
