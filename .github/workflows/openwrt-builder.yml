name: OpenWrt Builder
run-name: Build - ${{ inputs.model }}

on:
  workflow_dispatch:
    inputs:
      model:
        description: '选择设备配置'
        required: true
        default: 'x86_64_LEDE'
        type: choice
        options:
          - x86_64_LEDE
          - x86_64_immortalWrt
          - Qualcommax_LEDE
          - Qualcommax_V
          - Qualcommax_B

# 基础配置（公共参数）
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  EXTEND_DRIVER: true
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86-64
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04
    steps:
          
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024
  
      - name: Checkout
        uses: actions/checkout@main

      - name: Load Device Config
        run: |
          # 设置设备目录路径
          DEVICE_PATH="devices/${{ inputs.model }}"
          echo "DEVICE_PATH=$DEVICE_PATH" >> $GITHUB_ENV

          # 加载设备配置
          if [ -f "$DEVICE_PATH/env" ]; then
            while IFS= read -r line || [[ -n "$line" ]]; do
              # 跳过空行和注释
              [[ -z "$line" || "$line" =~ ^# ]] && continue

              # 解析变量名和值（以: 分割）
              var_name="${line%%:*}"
              var_value="${line#*:}"

              # 去除可能的前后空格
              var_name="$(echo -n "$var_name" | xargs)"
              var_value="$(echo -n "$var_value" | xargs)"

              # 处理路径变量
              case "$var_name" in
                CONFIG_FILE|DIY_P1_SH|DIY_P2_SH|FEEDS_CONF)
                  resolved_path="$DEVICE_PATH/$var_value"
                  echo "$var_name=$resolved_path" >> $GITHUB_ENV
                  echo "Resolved $var_name: $resolved_path"
                  ;;
                *)
                  echo "$var_name=$var_value" >> $GITHUB_ENV
                  ;;
              esac
            done < "$DEVICE_PATH/env"
          fi
  
      - name: Clone Source Code(克隆源代码)
        run: |
          df -hT $GITHUB_WORKSPACE
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
  
      - name: Load config
        run: |
          echo "CONFIG_FILE path is $CONFIG_FILE"
          cp $CONFIG_FILE $OPENWRT_PATH/.config
  
      - name: Extend Driver
        if: env.EXTEND_DRIVER == 'true'
        run: |
          cat config/Driver.config >> $OPENWRT_PATH/.config
  
      - name: Generate Variables(生成变量)
        run: |
          cd $OPENWRT_PATH
          make defconfig > /dev/null 2>&1
          SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
  
      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF $OPENWRT_PATH/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/$DIY_P1_SH
          
      - name: Cache Toolchain(缓存工具链)
        if: env.CACHE_TOOLCHAIN == 'true'
        uses: HiGarfield/cachewrtbuild@main
        with:
          ccache: false
          mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          prefix: ${{ env.OPENWRT_PATH }}
  
      - name: Update feeds
        run: cd $OPENWRT_PATH && ./scripts/feeds update -a
  
      - name: Install feeds
        run: cd $OPENWRT_PATH && ./scripts/feeds install -a
  
      - name: Load custom configuration
        run: |
          [ -e files ] && mv files $OPENWRT_PATH/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
          chmod +x $DIY_P2_SH
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/$DIY_P2_SH
  
      - name: Download DL Package(下载DL软件包)
        run: |
          cd $OPENWRT_PATH
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
  
      - name: Compile Firmware(开始编译固件)
        id: compile
        run: |
          cd $OPENWRT_PATH
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
  
      - name: Check Space Usage(检查空间使用情况)
        if: (!cancelled())
        run: df -hT
  
      - name: Upload Bin Directory(上传固件)
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.OPENWRT_PATH }}/bin
  
      - name: Organize Files(整理文件)
        if: steps.compile.outputs.status == 'success'
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*
          cp $OPENWRT_PATH/.config build.config
          rm -rf packages
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
  
      - name: Generate release tag
        id: tag
        if: env.FIRMWARE_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
  
      - name: Upload Firmware To Release(发布固件)
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          tag: ${{ steps.tag.outputs.release_tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
            ### 📒 固件信息(${{ env.FIRMWARE_TAG }})
            - 💻 这是 ${{ env.FIRMWARE_TAG }} 平台使用的 OpenWrt 固件
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 🌐 默认地址: 192.168.1.1
            - 🔑 默认密码: password
            ### 🧊 固件版本
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.VERSION_INFO }}
  
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 2
  
      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
